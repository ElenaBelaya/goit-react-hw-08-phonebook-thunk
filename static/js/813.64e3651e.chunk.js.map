{"version":3,"file":"static/js/813.64e3651e.chunk.js","mappings":"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","sources":["components/section/Section.js","components/contactForm/ContactForm.Styled.jsx","redux/contacts/contactsSelector.js","components/contactForm/ContactForm.js","components/contactList/ContactList.Styled.jsx","components/contactItem/ContactItem.js","components/contactList/ContactList.js","components/filter/Filter.styled.jsx","components/filter/Filter.js","views/ContactsView.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Title, SectionBox } from './Section.styled';\nconst Section = ({ title, children }) => (\n  <SectionBox>\n    <Title>{title}</Title>\n    {children}\n  </SectionBox>\n);\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n};\n","import { Form, Field } from 'formik';\nimport styled from '@emotion/styled';\n\n// import { indigo, deepPurple } from '@mui/material/colors';\n\n// const primary = indigo[500];\n// const secondary = deepPurple[500];\n\nexport const FormStyled = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  border: 1px solid #000000;\n  border-radius: 3px;\n  padding: 10px;\n  width: 80%;\n`;\n\nexport const FieldStyled = styled(Field)`\n  display: inline-block;\n  margin-bottom: 15px;\n  width: 95%;\n  height: 25px;\n  border-radius: 3px;\n  border: none;\n`;\n\nexport const TitleInput = styled('p')`\n  margin: 0px 0px 5px 0px;\n  color: #666479;\n`;\n","export const selectContacts = state => state.contacts.contactsReducer.items;\nexport const selectFilter = state => state.contacts.filter;\n","import shortid from 'shortid';\nimport { Formik } from 'formik';\nimport Notiflix from 'notiflix';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@mui/material/Button';\nimport { FormStyled, FieldStyled, TitleInput } from './ContactForm.Styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsOperations from 'redux/contacts/contactsOperations';\nimport { useEffect } from 'react';\nimport { selectContacts } from 'redux/contacts/contactsSelector';\n\nconst nameId = shortid();\nconst phoneId = shortid();\n\nconst useStyles = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n}));\nconst ContactForm = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { getContacts, addContacts } = contactsOperations;\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch, getContacts]);\n  const contacts = useSelector(selectContacts);\n\n  const addContact = (values, id) => {\n    const newContact = { id, ...values };\n    const found = contacts.some(function (contact) {\n      return contact.name.toLowerCase() === values.name.toLowerCase();\n    });\n    const resetForm = () => {\n      values.name = '';\n      values.number = '';\n    };\n    if (!found) {\n      dispatch(addContacts(newContact));\n      resetForm();\n      Notiflix.Notify.success('Сontact added successfully');\n    } else {\n      alert(`${values.name} is already in contacts`);\n    }\n  };\n\n  const handleSubmit = async (value, { setSubmitting }) => {\n    await addContact(value, shortid.generate());\n    setSubmitting(false);\n  };\n\n  return (\n    <Formik initialValues={{ name: '', number: '' }} onSubmit={handleSubmit}>\n      {({ isSubmitting }) => (\n        <FormStyled>\n          <label htmlFor={nameId}>\n            <TitleInput>Name</TitleInput>\n            <FieldStyled\n              id={nameId}\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Please, enter your name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </label>\n          <label htmlFor={phoneId}>\n            <TitleInput>Phone</TitleInput>\n            <FieldStyled\n              id={phoneId}\n              type=\"text\"\n              name=\"number\"\n              placeholder=\"Place for phone number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </label>\n          <br />\n\n          <Button\n            size=\"small\"\n            className={classes.margin}\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={isSubmitting}\n          >\n            Add contact\n          </Button>\n        </FormStyled>\n      )}\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\n// export const DeleteButton = styled.button`\n//   margin: 0px 10px;\n// `;\n\nexport const Li = styled.li`\n  margin-bottom: 5px;\n  list-style-type: none;\n  color: #3d3c48;\n  font-size: 20px;\n`;\n\nexport const List = styled.ul`\n  padding-inline-start: 0px;\n`;\n","//import { DeleteButton } from './ContactItem.Styled';\nimport Notiflix from 'notiflix';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\n//import Icon from '@material-ui/core/Icon';\nimport contactsOperations from 'redux/contacts/contactsOperations';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n//import { AiFillDelete, AiFillEdit } from 'react-icons/ai';\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nconst ContactItem = contact => {\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { id, name, number } = contact.contact;\n  const { removeContacts } = contactsOperations;\n\n  const onDeleteContact = id => {\n    dispatch(removeContacts(id));\n    Notiflix.Notify.success('Сontact removed from list');\n  };\n\n  return (\n    <>\n      <b>{name}:</b> {number}\n      <Button\n        size=\"small\"\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        startIcon={<DeleteIcon />}\n        onClick={() => onDeleteContact(id)}\n      >\n        Delete\n      </Button>\n      <Button\n        size=\"small\"\n        variant=\"contained\"\n        color=\"default\"\n        className={classes.button}\n        startIcon={<CloudUploadIcon />}\n        onClick={() =>\n          navigate(`/contacts/${id}`, {\n            state: { id: id, name: name, number: number },\n          })\n        }\n      >\n        Edit\n      </Button>\n    </>\n  );\n};\n\nexport default ContactItem;\n","import { Li, List } from './ContactList.Styled';\nimport { useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from 'redux/contacts/contactsSelector';\nimport ContactItem from '../contactItem/ContactItem';\nconst ContactList = () => {\n  const value = useSelector(selectFilter);\n  const contacts = useSelector(selectContacts);\n\n  const getVisibleContacts = () => {\n    const notmalisedFilter = value.toLowerCase();\n    const visibleContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(notmalisedFilter)\n    );\n\n    return visibleContacts;\n  };\n\n  return contacts !== [] && contacts !== undefined ? (\n    <List>\n      {getVisibleContacts().map(contact => (\n        <Li key={contact.id}>\n          <ContactItem contact={contact} />\n        </Li>\n      ))}\n    </List>\n  ) : (\n    <span>There are no contacts</span>\n  );\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  color: #666479;\n`;\n\nexport const FilterInput = styled.input`\n  width: 80%;\n  margin-top: 10px;\n  height: 25px;\n  border-radius: 3px;\n`;\n","import { Label, FilterInput } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter';\nimport { selectFilter } from 'redux/contacts/contactsSelector';\n\nconst Filter = () => {\n  const dispartch = useDispatch();\n  const value = useSelector(selectFilter);\n  const onFilterContacts = event => {\n    dispartch(setFilter(event.currentTarget.value));\n  };\n  return (\n    <Label>\n      Find contacts by name\n      <FilterInput\n        type=\"text\"\n        placeholder=\"Who your want to find?\"\n        value={value}\n        onChange={onFilterContacts}\n      ></FilterInput>\n    </Label>\n  );\n};\n\nexport default Filter;\n","import Section from 'components/section/Section';\nimport ContactForm from 'components/contactForm/ContactForm';\nimport ContactList from 'components/contactList/ContactList';\nimport Filter from 'components/filter/Filter';\n\nconst ContactsViews = () => {\n  return (\n    <>\n      <Section title={'Phonebook'}>\n        <ContactForm />\n      </Section>\n      <Section title={'Contacts'}>\n        <Filter />\n        <ContactList />\n      </Section>\n    </>\n  );\n};\n\nexport default ContactsViews;\n"],"names":["title","children","FormStyled","styled","Form","FieldStyled","Field","TitleInput","selectContacts","state","contacts","contactsReducer","items","selectFilter","filter","nameId","shortid","phoneId","useStyles","makeStyles","theme","margin","spacing","classes","dispatch","useDispatch","getContacts","contactsOperations","addContacts","useEffect","useSelector","addContact","values","id","newContact","some","contact","name","toLowerCase","alert","number","Notiflix","handleSubmit","value","setSubmitting","initialValues","onSubmit","isSubmitting","htmlFor","type","placeholder","pattern","required","Button","size","className","variant","color","disabled","Li","List","button","navigate","useNavigate","removeContacts","startIcon","Delete","onClick","onDeleteContact","CloudUpload","undefined","notmalisedFilter","includes","getVisibleContacts","map","Label","FilterInput","dispartch","onChange","event","setFilter","currentTarget"],"sourceRoot":""}