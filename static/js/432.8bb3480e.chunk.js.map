{"version":3,"file":"static/js/432.8bb3480e.chunk.js","mappings":"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","sources":["components/section/Section.js","components/contactForm/ContactForm.Styled.jsx","redux/contacts/contactsSelector.js","components/contactForm/ContactForm.js","components/contactList/ContactList.Styled.jsx","components/contactList/ContactList.js","components/filter/Filter.styled.jsx","components/filter/Filter.js","views/ContactsView.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Title, SectionBox } from './Section.styled';\nconst Section = ({ title, children }) => (\n  <SectionBox>\n    <Title>{title}</Title>\n    {children}\n  </SectionBox>\n);\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n};\n","import { Form, Field } from 'formik';\nimport styled from '@emotion/styled';\n\nexport const FormStyled = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  border: 1px solid #000000;\n  width: 50%;\n  padding: 10px;\n`;\n\nexport const FieldStyled = styled(Field)`\n  margin-right: 10px;\n  display: inline-block;\n  width: 200px;\n  margin-bottom: 15px;\n`;\n\nexport const ButtonSubmit = styled('button')`\n  display: inline-block;\n  width: 120px;\n`;\n\nexport const TitleInput = styled('p')`\n  margin: 0px 0px 5px 0px;\n`;\n","export const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.contacts.filter;\n","import shortid from 'shortid';\nimport { Formik } from 'formik';\nimport Notiflix from 'notiflix';\nimport {\n  FormStyled,\n  FieldStyled,\n  ButtonSubmit,\n  TitleInput,\n} from './ContactForm.Styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, addContacts } from 'redux/contacts/contactsOperations';\nimport { useEffect } from 'react';\nimport { selectContacts } from 'redux/contacts/contactsSelector';\n\nconst nameId = shortid();\nconst phoneId = shortid();\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(selectContacts);\n\n  const addContact = (values, id) => {\n    const newContact = { id, ...values };\n    const found = contacts.some(function (contact) {\n      return contact.name.toLowerCase() === values.name.toLowerCase();\n    });\n    const resetForm = () => {\n      values.name = '';\n      values.phone = '';\n    };\n    if (!found) {\n      dispatch(addContacts(newContact));\n      resetForm();\n      Notiflix.Notify.success('Сontact added successfully');\n    } else {\n      alert(`${values.name} is already in contacts`);\n    }\n  };\n\n  const handleSubmit = async (value, { setSubmitting }) => {\n    await addContact(value, shortid.generate());\n    setSubmitting(false);\n  };\n  return (\n    <Formik initialValues={{ name: '', phone: '' }} onSubmit={handleSubmit}>\n      {({ isSubmitting }) => (\n        <FormStyled>\n          <label htmlFor={nameId}>\n            <TitleInput>Name</TitleInput>\n            <FieldStyled\n              id={nameId}\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </label>\n          <label htmlFor={phoneId}>\n            <TitleInput>Phone</TitleInput>\n            <FieldStyled\n              id={phoneId}\n              type=\"text\"\n              name=\"phone\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </label>\n          <br />\n          <ButtonSubmit type=\"submit\" disabled={isSubmitting}>\n            Add contact\n          </ButtonSubmit>\n        </FormStyled>\n      )}\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const DeleteButton = styled.button`\n  margin-left: 10px;\n`;\n\nexport const Li = styled.li`\n  margin-bottom: 5px;\n`;\n","import { DeleteButton, Li } from './ContactList.Styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { selectContacts, selectFilter } from 'redux/contacts/contactsSelector';\nimport { removeContacts } from 'redux/contacts/contactsOperations';\n\nconst ContactList = () => {\n  const value = useSelector(selectFilter);\n  const contacts = useSelector(selectContacts);\n  const dispartch = useDispatch();\n\n  const getVisibleContacts = () => {\n    const notmalisedFilter = value.toLowerCase();\n    const visibleContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(notmalisedFilter)\n    );\n\n    return visibleContacts;\n  };\n\n  const onDeleteContact = id => {\n    dispartch(removeContacts(id));\n    Notiflix.Notify.success('Сontact removed from list');\n  };\n\n  return (\n    <ul>\n      {getVisibleContacts().map(({ id, name, phone }) => (\n        <Li key={id}>\n          {name}: {phone}\n          <DeleteButton type=\"button\" onClick={() => onDeleteContact(id)}>\n            Delete\n          </DeleteButton>\n        </Li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FilterInput = styled.input`\n  width: 200px;\n  margin-top: 10px;\n`;\n","import { Label, FilterInput } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter';\nimport { selectFilter } from 'redux/contacts/contactsSelector';\n\nconst Filter = () => {\n  const dispartch = useDispatch();\n  const value = useSelector(selectFilter);\n  const onFilterContacts = event => {\n    console.log(event.currentTarget.value);\n    dispartch(setFilter(event.currentTarget.value));\n  };\n  return (\n    <Label>\n      Find contacts by name\n      <FilterInput\n        type=\"text\"\n        value={value}\n        onChange={onFilterContacts}\n      ></FilterInput>\n    </Label>\n  );\n};\n\nexport default Filter;\n","import Section from 'components/section/Section';\nimport ContactForm from 'components/contactForm/ContactForm';\nimport ContactList from 'components/contactList/ContactList';\nimport Filter from 'components/filter/Filter';\n\nconst ContactsViews = () => {\n  return (\n    <>\n      <Section title={'Phonebook'}>\n        <ContactForm />\n      </Section>\n      <Section title={'Contacts'}>\n        <Filter />\n        <ContactList />\n      </Section>\n    </>\n  );\n};\n\nexport default ContactsViews;\n"],"names":["title","children","FormStyled","styled","Form","FieldStyled","Field","ButtonSubmit","TitleInput","selectContacts","state","contacts","items","selectFilter","filter","nameId","shortid","phoneId","dispatch","useDispatch","useEffect","getContacts","useSelector","addContact","values","id","newContact","some","contact","name","toLowerCase","alert","addContacts","phone","Notiflix","handleSubmit","value","setSubmitting","initialValues","onSubmit","isSubmitting","htmlFor","type","pattern","required","disabled","DeleteButton","Li","dispartch","notmalisedFilter","includes","getVisibleContacts","map","onClick","removeContacts","onDeleteContact","Label","FilterInput","onChange","event","console","log","currentTarget","setFilter"],"sourceRoot":""}